<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/dist/output.css" rel="stylesheet" />

  <script src="https://cdn.tiny.cloud/1/noojwbb5k17nx69z2jeevq2ytvtc2ickif8sizioqzyqqvk5/tinymce/6/tinymce.min.js"
    referrerpolicy="origin"></script>
  <script>
    tinymce.init({
      selector: 'textarea#content',
      // plugins: 'image code',
      // toolbar: 'undo redo | link image | code',
      // /* enable title field in the Image dialog*/
      // image_title: true,
      // /* enable automatic uploads of images represented by blob or data URIs*/
      // automatic_uploads: true,
      // /*
      //   URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
      //   images_upload_url: 'postAcceptor.php',
      //   here we add custom filepicker only to Image dialog
      // */
      // file_picker_types: 'image',
      // /* and here's our custom image picker*/
      // file_picker_callback: (cb, value, meta) => {
      //   const input = document.createElement('input');
      //   input.setAttribute('type', 'file');
      //   input.setAttribute('accept', 'image/*');

      //   input.addEventListener('change', (e) => {
      //     const file = e.target.files[0];

      //     const reader = new FileReader();
      //     reader.addEventListener('load', () => {
      //       /*
      //         Note: Now we need to register the blob in TinyMCEs image blob
      //         registry. In the next release this part hopefully won't be
      //         necessary, as we are looking to handle it internally.
      //       */
      //       const id = 'blobid' + (new Date()).getTime();
      //       const blobCache = tinymce.activeEditor.editorUpload.blobCache;
      //       const base64 = reader.result.split(',')[1];
      //       const blobInfo = blobCache.create(id, file, base64);
      //       blobCache.add(blobInfo);

      //       /* call the callback and populate the Title field with the file name */
      //       cb(blobInfo.blobUri(), { title: file.name });
      //     });
      //     reader.readAsDataURL(file);
      //   });

      //   input.click();
      // },
      content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }'
    });

  </script>

  <title>Document</title>
</head>

<body class="bg-gray-100">
  <%- include('./partials/header') %>

    <div class="container mx-auto p-7 w-vw-50 ">
      <h1 class="text-3xl font-bold mb-4">新增心情記事</h1>
      <form id="createArticleForm" class="max-w-xl mt-5">
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="title">標題：</label>
          <input
            class="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="title" type="text" placeholder="請輸入標題" required>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="content">內容：</label>
          <textarea id="content"></textarea>
          <!-- <textarea  class="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="content" rows="10" placeholder="請輸入內容" required ></textarea> -->
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="date">日期：</label>
          <input
            class="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="date" type="date" required>
        </div>
        <button
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold my-2 py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="button"><a href="/user/profile">回上一頁</a></button>
        <button id="submitButton"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold ml-2 py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="submit">送出</button>
      </form>
    </div>

    <script>




      // 監聽表單提交事件
      document.getElementById("createArticleForm").addEventListener("submit", function (event) {
        event.preventDefault(); // 阻止默认的表单提交行为

        // 获取输入的标题、内容和日期
        const title = document.getElementById("title").value;
        const content = tinymce.activeEditor.getContent();
        const date = document.getElementById("date").value;

        console.log('content', content);

        // 执行 AJAX 请求或其他操作（这里仅作示例）
        createArticle(title, content, date);
      });


      // 執行文章創建的 AJAX 請求
      function createArticle(title, content, date) {
        // 使用 fetch API 發送 POST 請求到指定的 API 端點
        fetch("/user/create-article", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ title, content, date })
        })
          .then(response => response.json())
          .then(data => {
            // 請求成功後的處理
            if (data.message === 'success') {
              console.log(data);
              console.log(data.message);
              // 清空輸入欄位
              document.getElementById("title").value = "";
              document.getElementById("content").value = "";
              document.getElementById("date").value = "";
              alert("文章已成功新增！");
              return window.location.href = "/user/profile"
            }
            console.log(data);
            alert("文章新增失敗！");
          })
          .catch(error => {
            // 請求失敗後的處理
            console.error(error);
          });
      }
    </script>
</body>

</html>