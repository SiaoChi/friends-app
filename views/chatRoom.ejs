<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/img/logo1.svg">

    <title>聊天室</title>
    <link href="/dist/output.css" rel="stylesheet">
    <style>
        body {
            margin: 0;
            padding-bottom: 3rem;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        .message-received {
            text-align: left;
            /* 其他相關樣式 */
        }

        .message-sent {
            text-align: right;
            /* 其他相關樣式 */
        }

        #form {
            background: rgba(0, 0, 0, 0.15);
            padding: 0.25rem;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            height: 3rem;
            box-sizing: border-box;
            backdrop-filter: blur(10px);
        }

        #input {
            border: none;
            padding: 0 1rem;
            flex-grow: 1;
            border-radius: 2rem;
            margin: 0.25rem;
        }

        #input:focus {
            outline: none;
        }

        #nickname-label {
            list-style-type: none;
            margin: 0;
            padding: 0.5rem 1rem;
        }


        #form>button {
            background: #333;
            border: none;
            padding: 0 1rem;
            margin: 0.25rem;
            border-radius: 3px;
            outline: none;
            color: #fff;
        }

        #messages {
            list-style-type: none;
            margin: 0;
            padding: 0;
        }

        #messages>li {
            padding: 0.5rem 1rem;
        }

        .red-dot {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            display: inline-block;
            position: absolute;
            top: 0;
            right: 0;
        }
    </style>
</head>

<body>
    <%- include('./partials/header') %>

        <div class="flex justify-start items-center ">
            <div class="border border-gray-400 h-[560px] p-2 w-[400px] overflow-y-scroll">
                <div class="bg-black text-white p-2 sticky top-0">聊天清單</div>
                <div class="mt-2 p-2" id="chatlist">
                </div>
            </div>
            <div class=" border border-gray-400 h-[560px] p-2 w-[600px] relative overflow-y-scroll" id="chatroom">
                <div class="bg-black text-white p-2 w-[600px] sticky top-0 ">聊天室</div>
                <div></div>
                <ul id="messages" class="">
                    <!-- <li class="flex">
                        <img class="w-[30px] h-[30px]" src="/img/user.png" alt="">
                        <text class="ml-4 bg-slate-200 rounded-lg p-2">測試文字</text>
                    </li> -->
                </ul>
                <form class="absolute" id="form" action="">
                    <input id="input" autocomplete="off" /><button>Send</button>
                </form>
            </div>
            <div class="flex items-center justify-center border border-gray-400 w-[300px] h-[560px]" id="info">
                
            </div>
        </div>
        

        <!-- <script src="/socket.io/socket.io.js"></script> -->
        <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
        <script>

            let socket = io();

            const messages = document.getElementById('messages');
            const form = document.getElementById('form');
            const input = document.getElementById('input');
            const chatList = document.getElementById('chatlist')
            const senderId = localStorage.getItem('userId');
            const userName = localStorage.getItem('name');
            const roomName = window.location.href.match(/\/chatroom\/(\d+)/)[1];
            const urlParams = new URLSearchParams(window.location.search);
            const receiverId = urlParams.get('id');

            if (!receiverId) { alert('請選擇一個好友開始聊天') }

            messageIcon.addEventListener('click', function () {
                messageIcon.removeChild(redDot);
            });

            socket.emit('joinMyRoom', String(senderId)); // 加入自己socket房間

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                const nickname = userName;
                if (!roomName) {
                    if (senderId > receiverId) {
                        roomName = `${receiverId}${senderId}`;
                    }
                    else {
                        roomName = `${senderId}${receiverId}`;
                    }
                }
                if (input.value) {
                    socket.emit("send", { nickname, message: input.value, senderId, receiverId, room: roomName });

                    let userInput = document.createElement('li');
                    userInput.classList.add('send');

                    // 主聊天室畫面更新 
                    userInput.classList.add('message-sent');
                    let text = document.createElement('text');
                    text.classList.add('ml-4', 'bg-slate-200', 'rounded-lg', 'p-2');
                    text.textContent = `${input.value}`;
                    userInput.appendChild(text);
                    messages.appendChild(userInput);

                    // 下滑到最底部
                    const container = document.getElementById('chatroom');
                    container.scrollTop = container.scrollHeight - container.clientHeight;

                    // ChatList畫面更新
                    const existingChatPerson = document.querySelector(`[data-senderid="${receiverId}"]`);
                    const userIcon = '/img/user.png'

                    if (existingChatPerson !== null && existingChatPerson !== undefined) {
                        const messageElement = existingChatPerson.querySelector('.mt-1');
                        messageElement.textContent = input.value;
                        // existingChatPerson.classList.replace('bg-gray-100','bg-blue-200');
                        chatList.prepend(existingChatPerson);
                    } else {
                        const chatPerson = `
                                            <div class="mb-2 p-2" data-senderid= "${receiverId}" >
                                                <a href="/chatroom/${roomName}?id=${receiverId}" class="flex items-center relative" data-room="${room}" >
                                                    <img class="w-10 h-10" src="${receiverPicture}" alt="">
                                                    <div class="ml-4">
                                                    <h5 class="text-lg">${receiverName}</h5>
                                                    <p class="mt-1">${input.value}</p>
                                                    </div>
                                                    <span class="red-dot"></span>        
                                                </a>
                                            </div>
                                       `;
                        chatList.insertAdjacentHTML('afterbegin', chatPerson);
                    }
                    input.value = '';
                }
            });


            // 聽自己id的socket範圍，如果有訊息就拉出來
            socket.on("message", function (data) {
                const { nickname, message, senderId, receiverId, room } = data;

                // header chat-icon加入紅點
                var messageIcon = document.getElementById('messageIcon');
                var redDot = document.createElement('span');
                redDot.className = 'red-dot';
                messageIcon.appendChild(redDot);
                console.log(messageIcon);

                if (room === roomName) {
                    var item = document.createElement('li');
                    item.classList.add('message-received', 'flex');
                    let img = document.createElement('img');
                    img.classList.add('w-[30px]', 'h-[30px]', 'rounded-full');
                    img.src = `${receiverPicture}`;
                    img.alt = 'picture';

                    let text = document.createElement('text');
                    text.classList.add('ml-4', 'rounded-lg', 'p-2');
                    text.textContent = `${message}`;

                    item.appendChild(img);
                    item.appendChild(text);
                    messages.appendChild(item);
                    const container = document.getElementById('chatroom');
                    container.scrollTop = container.scrollHeight - container.clientHeight;
                }

                const existingChatPerson = document.querySelector(`[data-senderid="${senderId}"]`);
                const aElement = existingChatPerson.querySelector('a');

                if (existingChatPerson) {
                    const messageElement = existingChatPerson.querySelector('.mt-1');
                    messageElement.textContent = message;
                    // existingChatPerson.classList.replace('bg-gray-100', 'bg-blue-200');

                    let span = document.createElement('span');
                    span.classList.add('red-dot');
                    aElement.appendChild(span);

                    console.log('aEle', aElement);
                    chatList.prepend(existingChatPerson);
                    console.log('existingChatPerson', existingChatPerson);
                } else {
                    const chatPerson = ` <div class="mb-2 bg-blue-200 p-2" data-senderid="${senderId}" >
                                            <a href="/chatroom/${room}?id=${senderId}" class="person flex items-center relative" data-room="${room}">
                                                <img class="w-10 h-10 rounded-full" src="${userIcon}" alt="">
                                                <div class="ml-4">
                                                    <h5 class="text-lg">${senderId}</h5>
                                                    <p class="mt-1">${message}</p>
                                                </div>  
                                                <span class="red-dot"></span> 
                                            </a>
                                            </div>
                                       `;
                    console.log('2.', chatPerson);
                    chatList.insertAdjacentHTML('afterbegin', chatPerson);
                }

            });

            async function fetchChatList() {
                try {
                    const fetchData = await fetch(`/api/v1/chatlist/${senderId}`)
                    const fetchChatList = await fetchData.json();
                    console.log('fetchChatList', fetchChatList);
                    fetchChatList.forEach(item => {
                        // 如果senderId是自己，不用有小紅點
                        if (item.sender_id === Number(senderId) || item.sender_id === 0) {
                            console.log('1', item.sender_id, Number(senderId));
                            const chatPerson = `
                                            <div class="items-center mb-2 bg-gray-100 p-2" data-senderid= "${item.receiverId}" id="chat-person">
                                                <a href="/chatroom/${item.room_name}?id=${item.receiverId}" class="block w-full flex relative" data-room="${item.room_name}">
                                                    <img class="w-10 h-10 rounded-full" src="${item.receiverPicture}" alt="">
                                                    <div class="ml-4">
                                                    <h5 class="text-lg">${item.receiverName}</h5>
                                                    <p class="mt-1">${item.last_message}</p>
                                                    </div>  
                                                </a>
                                            </div>
                                            `;
                            chatList.insertAdjacentHTML('afterbegin', chatPerson);
                        } else {
                            console.log('2', item.sender_id, Number(senderId));
                            // 如果senderId 不是自己，要有小紅點
                            const chatPerson = `
                                            <div class="items-center mb-2 bg-gray-100 p-2" data-senderid= "${item.receiverId}" id="chat-person">
                                                <a href="/chatroom/${item.room_name}?id=${item.receiverId}" class="block w-full flex relative" data-room="${item.room_name}">
                                                    <img class="w-10 h-10 rounded-full" src="${item.receiverPicture}" alt="">
                                                    <div class="ml-4">
                                                    <h5 class="text-lg">${item.receiverName}</h5>
                                                    <p class="mt-1">${item.last_message}</p>
                                                    </div> 
                                                    <span class="red-dot"></span>     
                                                </a>
                                            </div>
                                            `;
                            chatList.insertAdjacentHTML('afterbegin', chatPerson);
                        }
                    });

                } catch (err) {
                    console.error('Error occurred while fetching chat list:', error);
                }
            }


            const info = document.getElementById('info');

            let receiverPicture
            let receiverName
            async function fetchReceiverInfo() {
                try {
                    const fetchData = await fetch(`/api/v1/user/profile/${receiverId}`)
                    const receiverInfo = await fetchData.json();
                    console.log('fetchReceiverInfo->', receiverInfo);
                    receiverPicture = receiverInfo[0].picture;
                    receiverName = receiverInfo[0].name;
                    const fetchInfo = `
                                <div class="flex-col border border-gray-300">
                                    <img class="p-10"
                                        src="${receiverPicture}"
                                        alt="圖片">
                                    <button class="bg-black text-white"><a href=/user/profile/${receiverId}>個人專頁</a></button>
                                    <div class="border border-gray-300 mt-4">
                                        <div class="text-lg">${receiverName}</div>
                                        <ul class="mt-2">
                                            <li>家人狀況:${receiverInfo[0].level}</li>
                                            <li>主要照顧者:${receiverInfo[0].carer}</li>
                                            <li>現有煩惱：${receiverInfo[0].current_problem}</li>
                                        </ul>
                                    </div>
                                </div>
                                 `
                    info.innerHTML = fetchInfo
                } catch (err) {
                    console.error('Error occurred while fetching fetchRoomMessages:', error);
                }
            }


            async function fetchRoomMessages() {
                try {
                    const fetchData = await fetch(`/api/v1/chatroom/${roomName}`)
                    const fetchRoomMessages = await fetchData.json();
                    console.log('fetchRoomMessages->', fetchRoomMessages);

                    fetchRoomMessages.forEach(item => {
                        let userInput = document.createElement('li');
                        // userInput.classList.add('send');

                        if (item.sender_id === Number(senderId)) {
                            userInput.classList.add('message-sent');
                            let text = document.createElement('text');
                            text.classList.add('ml-4', 'bg-slate-200', 'rounded-lg', 'p-2');
                            text.textContent = `${item.message}`;
                            userInput.appendChild(text);

                        } else {
                            userInput.classList.add('message-received', 'flex');
                            let img = document.createElement('img');
                            img.classList.add('w-[30px]', 'h-[30px]', 'rounded-full');
                            img.src = `${receiverPicture}`;
                            img.alt = '';

                            let text = document.createElement('text');
                            text.classList.add('ml-4', 'bg-slate-200', 'rounded-lg', 'p-2');
                            text.textContent = `${item.message}`;

                            userInput.appendChild(img);
                            userInput.appendChild(text);
                        }

                        messages.appendChild(userInput);
                    })
                    const container = document.getElementById('chatroom');
                    container.scrollTop = container.scrollHeight - container.clientHeight;
                } catch (err) {
                    console.error('Error occurred while fetching fetchRoomMessages:', error);
                }
            }

            const chatListDiv = document.getElementById('chatlist');
            chatListDiv.addEventListener('click', async (event) => {
                // event.preventDefault();
                const roomName = event.target.getAttribute('data-room');
                const redDot = event.target.querySelector('a .red-dot');
                if (redDot) {
                    redDot.style.display = 'none';
                };
                if (roomName) {
                    const read = await fetchReadMessage(roomName)
                }

            })

            
            function fetchReadMessage(room) {
                console.log('fetchReadMessage');
                fetch(`/api/v1/chatroom/${room}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ room })
                }).then(response => response.json())
                    .then(data => {
                        if (data.message === 'success') {
                            console.log('dataMsgRead', data.message);
                            return
                        }
                        throw new Error('reset message status failed')
                    })
                    .catch(error => { console.error(error); });
            }

            /*
            const messageElement = existingChatPerson.querySelector('.mt-1');
                    messageElement.textContent = message;
                    existingChatPerson.classList.replace('bg-gray-100', 'bg-blue-200');
            */


            async function fetchChatPersonData() {
                await fetchReceiverInfo();
                await fetchRoomMessages();

            }

            fetchChatPersonData();
            if (receiverId) fetchChatList();

        </script>
</body>

</html>